<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Series on csWhizz</title><link>https://cswhizz.github.io/series/</link><description>Recent content in Series on csWhizz</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Sat, 01 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://cswhizz.github.io/series/index.xml" rel="self" type="application/rss+xml"/><item><title>Computer Engineering And Ethical Hacking Resources on the Web</title><link>https://cswhizz.github.io/post/computer-engineering-and-ethical-hacking-resources-on-the-web/</link><pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate><guid>https://cswhizz.github.io/post/computer-engineering-and-ethical-hacking-resources-on-the-web/</guid><description>&lt;p>A curated catalogue of GitHub repositories containing books, and other resources for computer engineering students.&lt;/p>
&lt;h2 id="interview-resources">Interview Resources&lt;/h2>
&lt;p>&lt;a href="https://github.com/davidhampgonsalves/interview-resources/blob/master/README.md">davidhampgonsalves/interview-resources&lt;/a> - Long list of resources for preparing for technical computer engineering interviews.&lt;/p>
&lt;h2 id="awesome-youtube-channels">Awesome YouTube Channels&lt;/h2>
&lt;p>&lt;a href="https://github.com/benthecoder/yt-channels-DS-AI-ML-CS">benthecoder/yt-channels-DS-AI-ML-CS&lt;/a> - A comprehensive list of +180 YouTube Channels (in no particular order) for Data Science, Data Engineering, Machine Learning, Deep Learning, Artificial Intelligence, Computer Science, programming, software engineering, and more!&lt;/p>
&lt;h2 id="articles-from-the-web">Articles from the Web&lt;/h2>
&lt;h4 id="good-practices">Good practices&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://8thlight.com/blog/alexandru-codreanu/dario-garcia/lucas-giudice/2015/10/30/caring-coding.html">Caring about coding&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.joelonsoftware.com/2006/08/01/can-your-programming-language-do-this/">Code Reusability and Functional Programming&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.wearemobilefirst.com/blog/healthy-coding-practices">Healthy Coding Practices&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/@biratkirat/step-8-the-boy-scout-rule-robert-c-martin-uncle-bob-9ac839778385">The Boy Scout Rule in Coding&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mastery.games/post/solve-it-once/">Solve It Once&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="software-design-principles-patterns-and-arquitectures">Software Design, Principles, Patterns and Arquitectures&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://www.wearemobilefirst.com/blog/atomic-design">Atomic Design: Getting Started&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://mishadoff.com/blog/clojure-design-patterns/">Clojure Design Patterns&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/">DDD, Hexagonal, Onion, Clean, CQRS, â€¦ How I put it all together&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.jacobsdata.com/2020/02/19/a-brief-intro-to-clean-architecture-clean-ddd-and-cqrs">A Brief Intro to Clean Architecture, Clean DDD, and CQRS&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/backticks-tildes/the-s-o-l-i-d-principles-in-pictures-b34ce2f1e898">The S.O.L.I.D Principles in Pictures&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/category/resiliency">Resiliency Patterns&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://web.archive.org/web/20110714224545/http://www.objectmentor.com/resources/articles/isp.pdf">The Interface Segregation Principle&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="system-architectures">System Architectures&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://microservices.io/patterns/data/saga.html">Saga pattern for microservices&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/@cramforce/designing-even-larger-applications-460ee029012d">Designing Even Larger Applications&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://thenewstack.io/cell-based-architecture-a-new-decentralized-approach-for-cloud-native-patterns/">Cell-Based Architecture: A New Decentralized Approach for Cloud Native Patterns&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="curiosities">Curiosities&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/dwmkerr/hacker-laws/blob/master/README.md">Hacker-laws: Laws, Theories, Principles and Patterns that developers will find useful&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="free-learning-platforms-or-resources">Free learning platforms or resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.freecodecamp.org/">Free Code Camp&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.maketecheasier.com/games-learn-css/">Learn CSS by playing&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://d2l.ai/index.html">Dive into Deep Learning&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.twitch.tv/aws">AWS Twitch account&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://web.dev/learn/">Learn building for the modern web&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://30secondsofknowledge.com/">30 seconds of knowledge extension&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/danistefanovic/build-your-own-x">Build Your Own X&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/EbookFoundation/free-programming-books">Free Programming Books&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/ohmyzsh/ohmyzsh">Oh My Zsh&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/jwasham/coding-interview-university">Coding Interview University&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/github/gitignore">Gitignore templates&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/donnemartin/system-design-primer">System Design Primer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/public-apis/public-apis">Public APIs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/jlevy/the-art-of-command-line">The Art of Command Line&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/trekhleb/javascript-algorithms">JavaScript Algorithms and Data Structures&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kamranahmedse/developer-roadmap">Developer Roadmap&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="coding-challenge-platforms">Coding challenge platforms&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.codewars.com">Codewars&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.codingame.com">CodinGame&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.hackerrank.com">HackerRank&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leetcode.com">LeetCode&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.interviewcake.com/">InterviewCake&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.coderbyte.com/">Coderbyte&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://codefights.com/">CodeFights&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.topcoder.com/">TopCoder&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.codechef.com/">CodeChef&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.geeksforgeeks.org/">Geeksforgeeks&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="books">Books&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/EbookFoundation/free-programming-books">Free Programming Books&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.packtpub.com/free-learning">Packtpub daily free book&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://landing.google.com/sre/books/">Google Site Reliability Engineering&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/hmemcpy/milewski-ctfp-pdf/">Category Theory for Programmers&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="awesome-resources-for-learning-ethical-hacking--pentesting">Awesome Resources For Learning Ethical Hacking &amp;amp; Pentesting&lt;/h2>
&lt;p>A collection of some best resources about Hacking &amp;amp; Penetration Testing to make you learn faster! Let&amp;rsquo;s make it the best resource repository for our community.&lt;/p>
&lt;h2 id="books-1">Books&lt;/h2>
&lt;ol>
&lt;li>The Hacker Playbook 2: Practical Guide To Penetration Testing&lt;/li>
&lt;li>The Basics of Hacking and Penetration Testing, Second Edition: Ethical Hacking and Penetration Testing Made Easy&lt;/li>
&lt;li>Breaking into Information Security: Learning the Ropes 101&lt;/li>
&lt;li>Penetration Testing: A Hands-On Introduction to Hacking&lt;/li>
&lt;li>Social Engineering: The Art of Human Hacking&lt;/li>
&lt;li>Hacking: The Art of Exploitation, 2nd Edition&lt;/li>
&lt;li>Web Hacking 101&lt;/li>
&lt;li>OWASP Testing Guide (A must read for web application developers and penetration testers)&lt;/li>
&lt;li>The Web Application Hacker&amp;rsquo;s Handbook: Finding and Exploiting Security Flaws&lt;/li>
&lt;li>The Basics of Web Hacking: Tools and Techniques to Attack the Web&lt;/li>
&lt;/ol>
&lt;h2 id="online-learning-platforms-to-sharpen-your-skills">Online learning Platforms to Sharpen Your Skills&lt;/h2>
&lt;p>&lt;a href="https://ctf.hacker101.com/">CTF Hacker101&lt;/a> - The Hacker101 CTF is a game designed to let you learn to hack in a safe, rewarding environment. Hacker101 is a free educational site for hackers.
&lt;a href="https://www.hackthebox.eu">Hack The Box :: Penetration Testing Labs&lt;/a> - An online platform to test and advance your skills in penetration testing and cyber security. Join today and start training in our online labs.
&lt;a href="https://tryhackme.com">TryHackMe&lt;/a> - TryHackMe is an online platform that teaches cyber security through short, gamified real-world labs.
&lt;a href="https://ctf365.com/">CTF365&lt;/a> - An account based ctf site, awarded by Kaspersky, MIT, T-Mobile.
&lt;a href="https://backdoor.sdslabs.co">Backdoor&lt;/a> - Pen testing labs that have a space for beginners, a practice arena and various competitions, account required.
&lt;a href="https://hack.me/">Hack.me&lt;/a> - Lets you build/host/attack vulnerable web apps.
&lt;a href="https://ctflearn.com/">CTFLearn&lt;/a> - An account-based ctf site, where users can go in and solve a range of challenges.
&lt;a href="https://www.owasp.org/index.php/OWASP_Vulnerable_Web_Applications_Directory_Project#tab=On-Line_apps">OWASP Vulnerable Web Applications Directory Project (Online)&lt;/a> - List of online available vulnerable applications for learning purposes.
&lt;a href="https://lab.pentestit.ru">Pentestit labs&lt;/a> - Hands-on Pentesting Labs (OSCP style)
&lt;a href="https://www.root-me.org">Root-me.org&lt;/a> - Hundreds of challenges are available to train yourself in different and not simulated environments
&lt;a href="https://www.vulnhub.com">Vulnhub.com&lt;/a> - Vulnerable By Design VMs for practical &amp;lsquo;hands-on&amp;rsquo; experience in digital security
&lt;a href="https://github.com/sagishahar/lpeworkshop">Windows / Linux Local Privilege Escalation Workshop&lt;/a> - Practice your Linux and Windows privilege escalation.
&lt;a href="http://www.hackingarticles.in/ctf-challenges1/">Hacking Articles&lt;/a> - CTF Breif Write up collection with a lot of screenshots good for beggainers.
&lt;a href="http://www.rafayhackingarticles.net/">Rafay Hacking Articles, a great blog&lt;/a> - Write up collections by Rafay Baloch.
&lt;a href="https://pentesterlab.com/">PentesterLab&lt;/a> - 20$ signature, complete content basic to write exploits, web, android.
&lt;a href="https://cybersecurity.wtf/">CyberSec WTF&lt;/a>- Emulated web pentesting challenges from bounty write-ups&lt;/p>
&lt;h2 id="off-line-learning-platforms-to-sharpen-your-skills">Off-Line learning Platforms to Sharpen Your Skills&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://github.com/davevs/dvxte">Damn Vulnerable Xebia Training Environment&lt;/a>&lt;/td>
&lt;td>Docker Container including several vurnerable web applications (DVWA,DVWServices, DVWSockets, WebGoat, Juiceshop, Railsgoat, django.NV, Buggy Bank, Mutilidae II and more)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.owasp.org/index.php/OWASP_Vulnerable_Web_Applications_Directory_Project#tab=Off-Line_apps">OWASP Vulnerable Web Applications Directory Project (Offline)&lt;/a>&lt;/td>
&lt;td>List of offline available vulnerable applications for learning purposes.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="linux-penetration-testing-os">Linux Penetration Testing OS&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="http://kali.org/">Kali&lt;/a>&lt;/td>
&lt;td>the infamous pentesting distro from the folks at Offensive Security&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.parrotsec.org/">Parrot &lt;/a>&lt;/td>
&lt;td>Debian includes full portable lab for security, DFIR, and development&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://androidtamer.com//">Android Tamer&lt;/a>&lt;/td>
&lt;td>Android Tamer is a Virtual / Live Platform for Android Security professionals.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://blackarch.org/index.html">BlackArch&lt;/a>&lt;/td>
&lt;td>Arch Linux based pentesting distro, compatible with Arch installs&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://lionsec-linux.org/">LionSec Linux&lt;/a>&lt;/td>
&lt;td>pentesting OS based on Ubuntu&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>My Plans for Second Year of Computer Engineering</title><link>https://cswhizz.github.io/post/my-plans-for-second-year-of-computer-engineering/</link><pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate><guid>https://cswhizz.github.io/post/my-plans-for-second-year-of-computer-engineering/</guid><description>&lt;p>So its August 2021 and today is my Second Semester End Sem exam :) wierd right! In short my &lt;a href="http://neerajadhav.github.io/how-to-start-your-first-year-computer-science-journey/" title="First year of computer Engineering">first year of Computer Engineering&lt;/a> is about to end.&lt;/p>
&lt;p>If you are someone who don&amp;rsquo;t know what to do in the upcoming year, then you are at the right place. Here are few of my future plans which I will try my best to accomplish.&lt;/p>
&lt;h3 id="base">Base&lt;/h3>
&lt;p>If you want to be a good programmer, then only thing you should do is&amp;hellip;.Practice coding daily. This will improve your skills and thought process. The fast you are able to find solution of particular problem, the more are your chances of cracking campus selection interviews.&lt;/p>
&lt;!--adsense-->
&lt;h3 id="dont-hurry-to-follow-the-trend">Don&amp;rsquo;t hurry to follow the trend&lt;/h3>
&lt;p>The biggest mistake people do is that they start thinking on which language should they learn first. I must say don&amp;rsquo;t hesitate to pick &lt;strong>C/C++&lt;/strong> as your first language in programming.&lt;/p>
&lt;p>Many people will say &lt;strong>Python&lt;/strong> is the trend, there is much scope in python and so on. If you learn &lt;strong>C/C++&lt;/strong> programming first, then moving on towards any other language will not be a big deal for you. For instance, if you learn a manual transmission car, then you will easily get adapt to automatic car.&lt;/p>
&lt;p>Keep your understanding and concepts crystal clear, be patient, keep practicing, challenge thyself and you will be a master at programming.&lt;/p>
&lt;!--adsense-->
&lt;h3 id="college-curriculum">College Curriculum&lt;/h3>
&lt;p>Depending upon your college syllabus, in each semester you will learn new programming language.
Here is the list,&lt;/p>
&lt;ol>
&lt;li>C Language&lt;/li>
&lt;li>C++ Programming&lt;/li>
&lt;li>Data Structure and Algorithms&lt;/li>
&lt;li>Core Java&lt;/li>
&lt;li>C#.net&lt;/li>
&lt;li>HTML, CSS, JavaScript&lt;/li>
&lt;li>PHP&lt;/li>
&lt;li>ASP . Net&lt;/li>
&lt;li>Android Development (added recently from 2017)&lt;/li>
&lt;li>Python&lt;/li>
&lt;/ol>
&lt;p>If you want to increase your logical skills then learn Data Structure and Algorithms in very deeply with different languages like C, C++ and Java, it will helps you lot and increase your problem solving skills. &lt;strong>Never miss any lecture or any opportunity to learn DSA&lt;/strong>.&lt;/p>
&lt;h3 id="side-by-side">Side by Side&lt;/h3>
&lt;p>Along with all these, you will have to learn English and aptitude. This will help you to crack campus interviews' first round.&lt;/p>
&lt;!--adsense-->
&lt;h3 id="project-based-learning">Project Based Learning&lt;/h3>
&lt;p>Most MNCs are in search of employees who have good practical knowledge.&lt;/p>
&lt;p>Projects can be one of the most efficient ways to learn as they force you to apply the skills while learning them. This, in fact, aids in retention and increases the usefulness of the skills learned.&lt;/p>
&lt;p>These projects will teach you a great deal about one concept or another. From learning how to apply Algorithms, to learning how to effectively deal with times, you will be able to showcase your skills in most efficient way.&lt;/p>
&lt;p>Thank you for reading this far. Comment your views in the comments section. Stay motivated.&lt;/p></description></item><item><title>How to Start Your First Year of Computer Engineering</title><link>https://cswhizz.github.io/post/how-to-start-your-first-year-of-computer-engineering/</link><pubDate>Fri, 30 Jul 2021 00:00:00 +0000</pubDate><guid>https://cswhizz.github.io/post/how-to-start-your-first-year-of-computer-engineering/</guid><description>&lt;p>Every student has big dreams in college, but unfortunately, some students give up completely till the second or third year. One of the main reasons is that they don&amp;rsquo;t pay much attention to learning. At the beginning, they either don&amp;rsquo;t know what to do to get into the company they dream of. When students of the same age get good internship opportunities or perform well in competitions, they feel frustrated. The only thing you can do to avoid this feeling is to persevere from the start.&lt;/p>
&lt;p>University days are the best time in anyoneâ€™s life. The first year itself is the best time. Because students make new friends, the more freedom you want, the more freedom you get. Because they are tired of the entrance exam study and now they want to have fun. There is nothing wrong with it. It should be interesting and discovering new things in college life, but it is good to start developing yourself so that this will not become a problem in your career.&lt;/p>
&lt;p>Always make time for the career you want to pursue. Even if you only spend two or three hours to improve your skills, you will reach a different level within a year.&lt;/p>
&lt;p>&lt;strong>This article will tell you what you need. Whether you are a freshman or not, if you are an engineering or computer science student&lt;/strong>&lt;/p>
&lt;!--adsense-->
&lt;h3 id="step-0---brushing-up">Step 0 - Brushing up&lt;/h3>
&lt;p>First, increase your typing speed. From now on, you will always be dealing with the computer. If you are not typing fast, you will be at a disadvantage and you will waste a lot of time compared to others. Start doing touch typing, Try to learn keyboard shortcuts, this will save lot of your time.&lt;/p>
&lt;h4 id="gpa-vs-skills">GPA v/s Skills&lt;/h4>
&lt;p>Next is upskilling yourself. Most students think that only by getting good grades can they find a good job. That is the wrong way of thinking. You have to abide by some standards to sit down and accept the interview, but in the end all you see is how good your skill is. If you are looking for employees or you want to start your own startup, you need skills, not qualifications.&lt;/p>
&lt;p>But again, this is another big mistake made by some students. If you do not meet the minimum standards, how will you demonstrate your skills? or how will you apply for a higher degree? so grades are also important.&lt;/p>
&lt;!--adsense-->
&lt;h3 id="step-1---plan-for-action">Step 1 - Plan for Action&lt;/h3>
&lt;p>Try making your own pathway of learning new skills. For instance if you want to learn web development then plan your first month of the learning process, you can break down like you doing HTML and CSS in the first two weeks, then JavaScript, etc.&lt;/p>
&lt;h4 id="dont-wait-for-others">Don&amp;rsquo;t wait for others&lt;/h4>
&lt;p>The students think that they have the data structure and algorithm course in the second year, they will learn it in the second year, so they don&amp;rsquo;t worry about the topic at that time. time.&lt;/p>
&lt;p>But what you really need to do is, if you have mastered the basics of a language, you have to learn part of the data structure, because this is one of the most important subjects for computer science students, in the interview you need to solve the problems that require a deep understanding of these topics, you need to explain your code, and you will be ask why you chose this data structure. If you did not learn these topics correctly, you will not be able answer any of these questions.&lt;/p>
&lt;!--adsense-->
&lt;h3 id="step-2---work-on-your-communication-and-writing-skills">Step 2 - Work on Your Communication and Writing Skills&lt;/h3>
&lt;p>Students do not improve their communication skills and lose the opportunity to be selected for internships or projects. From the first year of university, you should begin to exercise on your communication and writing skills in order to be more confident in interviews and can express yourself correctly. To improve your writing skills, you can start writing your own blog, article or story.&lt;/p>
&lt;h3 id="step-3---learn-by-making-projects">Step 3 - Learn By Making Projects&lt;/h3>
&lt;p>Projects are a great way to learn anything and add something to your resume. While learning languages â€‹â€‹or new skills, you should always complete multiple small projects. You will begin to understand the use case correctly, and as you succeed, your ability to solve problems will also improve our own stuff.&lt;/p>
&lt;p>You also need some good projects to apply for your area of â€‹â€‹interest to demonstrate your skills. Therefore, once you master the basics, you can start working on some real-time projects that you need. You can also collaborate with other developers or participate in open source projects to understand how git and GitHub works, and how the team handles large projects in the real world.&lt;/p>
&lt;h3 id="step-4---dont-try-to-learn-all-at-once">Step 4 - Donâ€™t Try To Learn All at Once&lt;/h3>
&lt;p>First, you should focus on a language until you master it correctly. Some freshmen try to learn more and more languages instead of focusing on one language, and end up learning nothing.&lt;/p>
&lt;p>Remember, if you are proficient in one of these languages, switching to the other language is not that difficult. But if you often try to change the grammar you won&amp;rsquo;t remember anyone, and no one will ask you how many languages â€‹â€‹you know. In fact, you only need a language to clean up a company&amp;rsquo;s programming cycle. They want to see your problem-solving skills, not your memory skills.&lt;/p>
&lt;!--adsense-->
&lt;h3 id="step-5---certificates-are-not-everything">Step 5 - Certificates are Not Everything&lt;/h3>
&lt;p>Many freshmen think certification is very important and try to get more certifications. If you have received a certificate to participate in the course or competition you requested, that&amp;rsquo;s great, but you should not participate in any competition just for certified webinars.&lt;/p>
&lt;p>You should get involved to gain experience, learn new things or become better. Some students add certification sections to their resumes, but it is always better to complete some good projects for the skills mentioned in your resume than to obtain a certificate of courses in these skills. Even Google believes you donâ€™t need a college degree to get a high paying tech job.&lt;/p>
&lt;h3 id="final-words">Final words&lt;/h3>
&lt;p>Pursuing career in Computer Science is not that easy, it seems too much burden and too much to learn, but in reality if you enjoy your work along with living every other aspect of life, it will be fun.&lt;/p>
&lt;p>Along with studies try to give some time to your friends and family, hang out with them, go out for trekking and have fun!&lt;/p></description></item></channel></rss>